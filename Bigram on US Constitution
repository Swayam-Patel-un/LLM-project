{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ae7aa2ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T21:27:05.984049Z",
     "iopub.status.busy": "2024-07-11T21:27:05.983685Z",
     "iopub.status.idle": "2024-07-11T21:27:09.864794Z",
     "shell.execute_reply": "2024-07-11T21:27:09.863853Z"
    },
    "papermill": {
     "duration": 3.888453,
     "end_time": "2024-07-11T21:27:09.866981",
     "exception": false,
     "start_time": "2024-07-11T21:27:05.978528",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "from torch.nn import functional as f\n",
    "device='cuda' if torch.cuda.is_available() else 'cpu'\n",
    "print(device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7f32e851",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T21:27:09.875485Z",
     "iopub.status.busy": "2024-07-11T21:27:09.875019Z",
     "iopub.status.idle": "2024-07-11T21:27:11.524984Z",
     "shell.execute_reply": "2024-07-11T21:27:11.524000Z"
    },
    "papermill": {
     "duration": 1.656694,
     "end_time": "2024-07-11T21:27:11.527456",
     "exception": false,
     "start_time": "2024-07-11T21:27:09.870762",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2024-07-11 21:27:10--  https://github.com/Swayam-Patel-un/LLM-project/blob/main/The_US_Constitution.txt\r\n",
      "Resolving github.com (github.com)... 140.82.116.4\r\n",
      "Connecting to github.com (github.com)|140.82.116.4|:443... connected.\r\n",
      "HTTP request sent, awaiting response... 200 OK\r\n",
      "Length: unspecified [text/html]\r\n",
      "Saving to: 'The_US_Constitution.txt'\r\n",
      "\r\n",
      "The_US_Constitution     [ <=>                ] 772.15K  --.-KB/s    in 0.03s   \r\n",
      "\r\n",
      "2024-07-11 21:27:11 (23.0 MB/s) - 'The_US_Constitution.txt' saved [790679]\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!wget https://github.com/Swayam-Patel-un/LLM-project/blob/main/The_US_Constitution.txt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "20f1e3fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T21:27:11.536355Z",
     "iopub.status.busy": "2024-07-11T21:27:11.536028Z",
     "iopub.status.idle": "2024-07-11T21:27:11.555627Z",
     "shell.execute_reply": "2024-07-11T21:27:11.554447Z"
    },
    "papermill": {
     "duration": 0.026432,
     "end_time": "2024-07-11T21:27:11.557627",
     "exception": false,
     "start_time": "2024-07-11T21:27:11.531195",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "790663\n",
      "['\\n', ' ', '!', '\"', '#', '$', '%', '&', \"'\", '(', ')', '*', '+', ',', '-', '.', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=', '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[', '\\\\', ']', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '}', '\\xa0', '·', '’', '\\ufeff']\n",
      "97\n"
     ]
    }
   ],
   "source": [
    "with open(\"The_US_Constitution.txt\",\"r\",encoding=\"utf-8\") as f:\n",
    "    text=f.read()\n",
    "    \n",
    "print(len(text))\n",
    "char=sorted(set(text))\n",
    "print(char)\n",
    "print(len(char))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0b451a24",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T21:27:11.565871Z",
     "iopub.status.busy": "2024-07-11T21:27:11.565566Z",
     "iopub.status.idle": "2024-07-11T21:27:11.572175Z",
     "shell.execute_reply": "2024-07-11T21:27:11.571306Z"
    },
    "papermill": {
     "duration": 0.013105,
     "end_time": "2024-07-11T21:27:11.574291",
     "exception": false,
     "start_time": "2024-07-11T21:27:11.561186",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[34, 77, 69, 82, 73, 67, 65]\n",
      "America\n"
     ]
    }
   ],
   "source": [
    "str_to_int = { ch:i for i,ch in enumerate(char) }\n",
    "int_to_str = { i:ch for i,ch in enumerate(char) }\n",
    "encode = lambda s: [str_to_int[c] for c in s]\n",
    "decode = lambda l: ''.join([int_to_str[i] for i in l])\n",
    "\n",
    "print(encode('America'))\n",
    "decode_am=decode(encode('America'))\n",
    "print(decode_am)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "48d6c9f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T21:27:11.582703Z",
     "iopub.status.busy": "2024-07-11T21:27:11.582413Z",
     "iopub.status.idle": "2024-07-11T21:27:11.793558Z",
     "shell.execute_reply": "2024-07-11T21:27:11.792554Z"
    },
    "papermill": {
     "duration": 0.217936,
     "end_time": "2024-07-11T21:27:11.795966",
     "exception": false,
     "start_time": "2024-07-11T21:27:11.578030",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([ 0,  0,  0,  0,  0,  0, 29,  2, 37, 48, 36, 53, 58, 49, 38,  1, 72, 84,\n",
      "        77, 76, 31,  0, 29, 72, 84, 77, 76,  0,  1,  1, 76, 65, 78, 71, 30,  3,\n",
      "        69, 78,  3,  0,  1,  1,  0,  1,  1, 68, 65, 84, 65, 14, 67, 79, 76, 79,\n",
      "        82, 14, 77, 79, 68, 69, 30,  3, 65, 85, 84, 79,  3,  1, 68, 65, 84, 65,\n",
      "        14, 76, 73, 71, 72, 84, 14, 84, 72, 69, 77, 69, 30,  3, 76, 73, 71, 72,\n",
      "        84,  3,  1, 68, 65, 84, 65, 14, 68, 65])\n"
     ]
    }
   ],
   "source": [
    "data=torch.tensor(encode(text), dtype=torch.long)\n",
    "print(data[:100])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "69f941ed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T21:27:11.805911Z",
     "iopub.status.busy": "2024-07-11T21:27:11.805586Z",
     "iopub.status.idle": "2024-07-11T21:27:11.814750Z",
     "shell.execute_reply": "2024-07-11T21:27:11.813657Z"
    },
    "papermill": {
     "duration": 0.016741,
     "end_time": "2024-07-11T21:27:11.816695",
     "exception": false,
     "start_time": "2024-07-11T21:27:11.799954",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "When input is  tensor([0])  target is  tensor(0)\n",
      "When input is  tensor([0, 0])  target is  tensor(0)\n",
      "When input is  tensor([0, 0, 0])  target is  tensor(0)\n",
      "When input is  tensor([0, 0, 0, 0])  target is  tensor(0)\n",
      "When input is  tensor([0, 0, 0, 0, 0])  target is  tensor(0)\n",
      "When input is  tensor([0, 0, 0, 0, 0, 0])  target is  tensor(29)\n",
      "When input is  tensor([ 0,  0,  0,  0,  0,  0, 29])  target is  tensor(2)\n"
     ]
    }
   ],
   "source": [
    "n=int(0.75*len(data))\n",
    "train=data[:n]\n",
    "test=data[n:]\n",
    "blocksize=7\n",
    "batchsize=5\n",
    "x=train[:blocksize]\n",
    "y=train[1:blocksize+1]\n",
    "for i in range(blocksize):\n",
    "    cont=x[:i+1]\n",
    "    tar=y[i]\n",
    "    print(\"When input is \",cont,\" target is \",tar)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4ac6c465",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T21:27:11.825719Z",
     "iopub.status.busy": "2024-07-11T21:27:11.825040Z",
     "iopub.status.idle": "2024-07-11T21:27:12.001620Z",
     "shell.execute_reply": "2024-07-11T21:27:12.000551Z"
    },
    "papermill": {
     "duration": 0.18312,
     "end_time": "2024-07-11T21:27:12.003545",
     "exception": false,
     "start_time": "2024-07-11T21:27:11.820425",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([587762,  52410, 548418, 501284, 129641])\n",
      "inputs:\n",
      "tensor([[69, 14, 76, 73, 78, 69,  1],\n",
      "        [ 1,  1,  1,  1,  1, 29, 85],\n",
      "        [73, 86, 31, 29, 68, 73, 86],\n",
      "        [31, 29, 68, 73, 86,  1, 68],\n",
      "        [15, 24, 22, 18, 15, 24, 22]], device='cuda:0')\n",
      "targets:\n",
      "tensor([[14, 76, 73, 78, 69,  1, 72],\n",
      "        [ 1,  1,  1,  1, 29, 85, 76],\n",
      "        [86, 31, 29, 68, 73, 86,  1],\n",
      "        [29, 68, 73, 86,  1, 68, 65],\n",
      "        [24, 22, 18, 15, 24, 22, 18]], device='cuda:0')\n"
     ]
    }
   ],
   "source": [
    "def get_batch(split):\n",
    "    data=train if split=='train' else test\n",
    "    ix=torch.randint(len(data)-blocksize,(batchsize,))\n",
    "    print(ix)\n",
    "    x=torch.stack([data[i:i+blocksize] for i in ix])\n",
    "    y=torch.stack([data[i+1:i+blocksize+1] for i in ix])\n",
    "    x,y=x.to(device),y.to(device)\n",
    "    return x, y\n",
    "\n",
    "x,y=get_batch('train')\n",
    "print(\"inputs:\")\n",
    "print(x)\n",
    "print(\"targets:\")\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "fe82d200",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T21:27:12.012977Z",
     "iopub.status.busy": "2024-07-11T21:27:12.012679Z",
     "iopub.status.idle": "2024-07-11T21:27:12.018791Z",
     "shell.execute_reply": "2024-07-11T21:27:12.017913Z"
    },
    "papermill": {
     "duration": 0.012847,
     "end_time": "2024-07-11T21:27:12.020615",
     "exception": false,
     "start_time": "2024-07-11T21:27:12.007768",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class BigramLanguage(nn.Module):\n",
    "    def __init__(self, vocab_size):\n",
    "        super().__init__()\n",
    "        self.token_embedding_table=nn.Embedding(vocab_size,vocab_size)\n",
    "        \n",
    "    def forward(self, index, tar):\n",
    "        logits=self.token_embedding_table(index)\n",
    "        b,t,c=logits.shape\n",
    "        logits=logits.view(b*t,c)\n",
    "        tar=tar.view(b*t)\n",
    "        loss=f.cross_entropy(logits, tar)\n",
    "        return logits,loss\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "09c54a71",
   "metadata": {
    "papermill": {
     "duration": 0.003864,
     "end_time": "2024-07-11T21:27:12.028579",
     "exception": false,
     "start_time": "2024-07-11T21:27:12.024715",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 5374442,
     "sourceId": 8933450,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30747,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 10.062794,
   "end_time": "2024-07-11T21:27:13.153163",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-11T21:27:03.090369",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
