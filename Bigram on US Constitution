{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":8933450,"sourceType":"datasetVersion","datasetId":5374442}],"dockerImageVersionId":30747,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nfrom torch.nn import functional as f\ndevice='cuda' if torch.cuda.is_available() else 'cpu'\nprint(device)","metadata":{"execution":{"iopub.status.busy":"2024-07-11T21:04:32.722354Z","iopub.execute_input":"2024-07-11T21:04:32.722730Z","iopub.status.idle":"2024-07-11T21:04:32.728766Z","shell.execute_reply.started":"2024-07-11T21:04:32.722701Z","shell.execute_reply":"2024-07-11T21:04:32.727579Z"},"trusted":true},"execution_count":32,"outputs":[{"name":"stdout","text":"cuda\n","output_type":"stream"}]},{"cell_type":"code","source":"!wget https://github.com/Swayam-Patel-un/LLM-project/blob/main/The_US_Constitution.txt","metadata":{"execution":{"iopub.status.busy":"2024-07-11T20:16:30.027985Z","iopub.execute_input":"2024-07-11T20:16:30.029098Z","iopub.status.idle":"2024-07-11T20:16:31.724527Z","shell.execute_reply.started":"2024-07-11T20:16:30.029059Z","shell.execute_reply":"2024-07-11T20:16:31.723528Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"--2024-07-11 20:16:30--  https://github.com/Swayam-Patel-un/LLM-project/blob/main/The_US_Constitution.txt\nResolving github.com (github.com)... 140.82.121.4\nConnecting to github.com (github.com)|140.82.121.4|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: unspecified [text/html]\nSaving to: 'The_US_Constitution.txt'\n\nThe_US_Constitution     [ <=>                ] 772.04K  --.-KB/s    in 0.1s    \n\n2024-07-11 20:16:31 (6.42 MB/s) - 'The_US_Constitution.txt' saved [790566]\n\n","output_type":"stream"}]},{"cell_type":"code","source":"with open(\"The_US_Constitution.txt\",\"r\",encoding=\"utf-8\") as f:\n    text=f.read()\n    \nprint(len(text))\nchar=sorted(set(text))\nprint(char)\nprint(len(char))","metadata":{"execution":{"iopub.status.busy":"2024-07-11T20:19:41.498398Z","iopub.execute_input":"2024-07-11T20:19:41.499345Z","iopub.status.idle":"2024-07-11T20:19:41.517866Z","shell.execute_reply.started":"2024-07-11T20:19:41.499310Z","shell.execute_reply":"2024-07-11T20:19:41.516701Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"790550\n['\\n', ' ', '!', '\"', '#', '$', '%', '&', \"'\", '(', ')', '*', '+', ',', '-', '.', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=', '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[', '\\\\', ']', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '}', '\\xa0', '·', '’', '\\ufeff']\n97\n","output_type":"stream"}]},{"cell_type":"code","source":"str_to_int = { ch:i for i,ch in enumerate(char) }\nint_to_str = { i:ch for i,ch in enumerate(char) }\nencode = lambda s: [str_to_int[c] for c in s]\ndecode = lambda l: ''.join([int_to_str[i] for i in l])\n\nprint(encode('America'))\ndecode_am=decode(encode('America'))\nprint(decode_am)","metadata":{"execution":{"iopub.status.busy":"2024-07-11T20:24:57.292412Z","iopub.execute_input":"2024-07-11T20:24:57.293252Z","iopub.status.idle":"2024-07-11T20:24:57.299614Z","shell.execute_reply.started":"2024-07-11T20:24:57.293219Z","shell.execute_reply":"2024-07-11T20:24:57.298699Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"[34, 77, 69, 82, 73, 67, 65]\nAmerica\n","output_type":"stream"}]},{"cell_type":"code","source":"data=torch.tensor(encode(text), dtype=torch.long)\nprint(data[:100])","metadata":{"execution":{"iopub.status.busy":"2024-07-11T20:28:49.901140Z","iopub.execute_input":"2024-07-11T20:28:49.901653Z","iopub.status.idle":"2024-07-11T20:28:50.118211Z","shell.execute_reply.started":"2024-07-11T20:28:49.901623Z","shell.execute_reply":"2024-07-11T20:28:50.117245Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"tensor([ 0,  0,  0,  0,  0,  0, 29,  2, 37, 48, 36, 53, 58, 49, 38,  1, 72, 84,\n        77, 76, 31,  0, 29, 72, 84, 77, 76,  0,  1,  1, 76, 65, 78, 71, 30,  3,\n        69, 78,  3,  0,  1,  1,  0,  1,  1, 68, 65, 84, 65, 14, 67, 79, 76, 79,\n        82, 14, 77, 79, 68, 69, 30,  3, 65, 85, 84, 79,  3,  1, 68, 65, 84, 65,\n        14, 76, 73, 71, 72, 84, 14, 84, 72, 69, 77, 69, 30,  3, 76, 73, 71, 72,\n        84,  3,  1, 68, 65, 84, 65, 14, 68, 65])\n","output_type":"stream"}]},{"cell_type":"code","source":"n=int(0.75*len(data))\ntrain=data[:n]\ntest=data[n:]\nblocksize=7\nbatchsize=5\nx=train[:blocksize]\ny=train[1:blocksize+1]\nfor i in range(blocksize):\n    cont=x[:i+1]\n    tar=y[i]\n    print(\"When input is \",cont,\" target is \",tar)","metadata":{"execution":{"iopub.status.busy":"2024-07-11T20:55:09.573786Z","iopub.execute_input":"2024-07-11T20:55:09.574471Z","iopub.status.idle":"2024-07-11T20:55:09.583537Z","shell.execute_reply.started":"2024-07-11T20:55:09.574436Z","shell.execute_reply":"2024-07-11T20:55:09.582518Z"},"trusted":true},"execution_count":26,"outputs":[{"name":"stdout","text":"When input is  tensor([0])  target is  tensor(0)\nWhen input is  tensor([0, 0])  target is  tensor(0)\nWhen input is  tensor([0, 0, 0])  target is  tensor(0)\nWhen input is  tensor([0, 0, 0, 0])  target is  tensor(0)\nWhen input is  tensor([0, 0, 0, 0, 0])  target is  tensor(0)\nWhen input is  tensor([0, 0, 0, 0, 0, 0])  target is  tensor(29)\nWhen input is  tensor([ 0,  0,  0,  0,  0,  0, 29])  target is  tensor(2)\n","output_type":"stream"}]},{"cell_type":"code","source":"def get_batch(split):\n    data=train if split=='train' else test\n    ix=torch.randint(len(data)-blocksize,(batchsize,))\n    print(ix)\n    x=torch.stack([data[i:i+blocksize] for i in ix])\n    y=torch.stack([data[i+1:i+blocksize+1] for i in ix])\n    x,y=x.to(device),y.to(device)\n    return x, y\n\nx,y=get_batch('train')\nprint(\"inputs:\")\nprint(x)\nprint(\"targets:\")\nprint(y)","metadata":{"execution":{"iopub.status.busy":"2024-07-11T21:03:05.214145Z","iopub.execute_input":"2024-07-11T21:03:05.214546Z","iopub.status.idle":"2024-07-11T21:03:05.373862Z","shell.execute_reply.started":"2024-07-11T21:03:05.214517Z","shell.execute_reply":"2024-07-11T21:03:05.372949Z"},"trusted":true},"execution_count":31,"outputs":[{"name":"stdout","text":"tensor([374317,  70423, 510936, 475551, 372690])\ninputs:\ntensor([[84, 73, 79, 78, 91, 14, 87],\n        [ 1, 25, 15, 19, 22,  1, 19],\n        [73, 84, 73, 79, 78, 27, 82],\n        [65, 83, 83, 30,  3, 82, 69],\n        [28, 92, 16, 11,  2, 83, 67]], device='cuda:0')\ntargets:\ntensor([[73, 79, 78, 91, 14, 87, 69],\n        [25, 15, 19, 22,  1, 19, 15],\n        [84, 73, 79, 78, 27, 82, 69],\n        [83, 83, 30,  3, 82, 69, 65],\n        [92, 16, 11,  2, 83, 67, 11]], device='cuda:0')\n","output_type":"stream"}]},{"cell_type":"code","source":"class BigramLanguage(nn.Module):\n    def __init__(self, vocab_size):\n        super().__init__()\n        self.token_embedding_table=nn.Embedding(vocab_size,vocab_size)\n        \n    def forward(self, index, tar):\n        logits=self.token_embedding_table(index)\n        b,t,c=logits.shape\n        logits=logits.view(b*t,c)\n        tar=tar.view(b*t)\n        loss=f.cross_entropy(logits, tar)\n        return logits,loss\n    ","metadata":{"execution":{"iopub.status.busy":"2024-07-11T21:06:26.432806Z","iopub.execute_input":"2024-07-11T21:06:26.433254Z","iopub.status.idle":"2024-07-11T21:06:26.437376Z","shell.execute_reply.started":"2024-07-11T21:06:26.433222Z","shell.execute_reply":"2024-07-11T21:06:26.436420Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}